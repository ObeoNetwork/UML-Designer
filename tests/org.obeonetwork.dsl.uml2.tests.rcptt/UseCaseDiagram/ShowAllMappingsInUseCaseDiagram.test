--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _xUmjgA-GEeWqyPO4VW22gA,_MWdYgIBGEeS4X6G9cD21hw,_j5GvUAUgEeWu0eW6YYFvkg,_he-_gIBIEeS4X6G9cD21hw,_4eO8kBAeEeWa5c8q1ijOWg,_bKL_sH-PEeS4X6G9cD21hw,_p5zq0M4oEeS8M6MvytM1MA,_nGeWoNMBEeSJ-bRbIBdx3w
Element-Name: ShowAllMappingsInUseCaseDiagram
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _41zxENL_EeSJ-bRbIBdx3w
Runtime-Version: 1.5.5.201503020312
Save-Time: 6/9/15 7:02 PM
Testcase-Type: ecl

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Open an existing Use case diagram which contains all available mappings and verify they are displayed.

Test:
- Open an existing diagram

Result:
- Verify first level element number

TODO: this test only verify number of elements but not the types and styles of the elements
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content

// Check Number of elements in diagram 
get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram" 
    | get-property childrenCount | equals 11 | verify-true
    
// Check Actor1 is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"] {
    get-edit-part -name Actor1 | get-edit-part -name Actor1 | get-property "getFigure().getText()" | equals Actor1 
        | verify-true
    with [get-edit-part -name Actor1 | get-edit-part -className WorkspaceImageEditPart | get-figure 0] {
        get-property "isVisible()" | equals true | verify-true
    }
}

// Check UseCase1 is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram" 
    | get-edit-part -name UseCaseTest1 | get-edit-part -className WorkspaceImageEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Association is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name Actor1 | get-target-connection 0] {
    get-property visible | equals true | verify-true
}

// Check Extend is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name UseCaseTest1 | get-target-connection 0] {
    get-edit-part -className "" | get-property "getFigure().getText()" | equals "« extend »" | verify-true
    get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
    get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
    get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
    get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
    get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
    get-property "element.ownedStyle.size" | equals 1 | verify-true
    get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
    //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
    //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
    get-property "element.ownedStyle.centered" | equals None | verify-true
}

// Check Include is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name UseCaseTest2 | get-target-connection 0] {
    get-edit-part -className "" | get-property "getFigure().getText()" | equals "« include »" | verify-true
    get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
    get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
    get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
    get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
    get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
    get-property "element.ownedStyle.size" | equals 1 | verify-true
    get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
    //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
    //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
    get-property "element.ownedStyle.centered" | equals None | verify-true
}

//Check Generalization is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"] {
    with [get-edit-part -name Actor1 | get-target-connection 1] {
        get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
        get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
        get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
        get-property "element.ownedStyle.targetArrow" | equals InputClosedArrow | verify-true
        get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
        get-property "element.ownedStyle.size" | equals 1 | verify-true
        get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
        //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
        //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
        get-property "element.ownedStyle.centered" | equals None | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}

// Check Subject Collaboration is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 4 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Subject DataType is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 2 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-figure "1/0" | get-property "isVisible()" | equals true | verify-true
}

// Check Subject Component is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Subject Class is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 5 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart | get-figure "1/0"] {
    get-property "isVisible()" | equals true | verify-true
}

// Check Subject Interface is present and visible
 with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 3 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

// Check Subject Artifact is present and visible
with [get-editor "Test Use Case Diagram" | get-diagram -index 1 | get-edit-part -name "Test Use Case Diagram"
    | get-edit-part -name "Test Subject" -index 1 | get-edit-part 
    -className DNodeContainerViewNodeContainerCompartmentEditPart] {
    get-property "getFigure().isVisible()" | equals true | verify-true
}

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
