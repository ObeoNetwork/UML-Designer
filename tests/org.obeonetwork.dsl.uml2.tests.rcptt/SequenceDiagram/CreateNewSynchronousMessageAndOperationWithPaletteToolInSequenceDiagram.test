--- RCPTT testcase ---
Format-Version: 1.0
Contexts: _xUmjgA-GEeWqyPO4VW22gA,_MWdYgIBGEeS4X6G9cD21hw,_j5GvUAUgEeWu0eW6YYFvkg,_he-_gIBIEeS4X6G9cD21hw,_4eO8kBAeEeWa5c8q1ijOWg,_bKL_sH-PEeS4X6G9cD21hw,_X-rQgH-QEeS4X6G9cD21hw,_Bfja0OG2EeS3L8OLI5YuWw,_X4ZsIOG2EeS3L8OLI5YuWw
Element-Name: CreateNewSynchronousMessageAndOperationWithPaletteToolInSequenceDiagram
Element-Type: testcase
Element-Version: 3.0
External-Reference: 
Id: _QhkNAOGsEeS3L8OLI5YuWw
Runtime-Version: 1.5.5.201503020312
Save-Time: 6/10/15 2:15 PM
Tags: skipExecution
Testcase-Type: ecl
Verifications: _7rUV4OG2EeS3L8OLI5YuWw

------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa
Content-Type: text/plain
Entry-Name: .description

Create a New semantic element in Sequence Diagram: Synchronous message or operation

Test:
- with Palette tool : "Synchronous message and operation creation" create new element in Sequence diagram from Class1 to Classe2 Life lines.

Result:
- new element appears in diagram
- new element appears in model
------=_.description-216f885c-d591-38ce-8ea2-e4f8cb4d6ffa--
------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac
Content-Type: text/ecl
Entry-Name: .content


// Create a Synchronous Message From Class1 to Class2 
with [get-editor "Test Sequence Diagram"] {
    with [get-palette | get-palette-entry "CR_Synch_Message"] {
        mouse-move 6 17 button1 -height 37 -width 134
        mouse-press 6 17 button1 -height 37 -width 134
        mouse-release 6 17 button1 524288 -height 37 -width 134
    }
    with [get-palette | get-palette-entry "Synchronous Message and Operation Creation"] {
        mouse-move 47 30 button1 -height 67 -width 134
        mouse-press 47 30 button1 -height 67 -width 134
        mouse-release 47 30 button1 524288 -height 67 -width 134
    }
    with [get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
        with [get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-edit-part 
            -className SquareEditPart] {
            mouse-move 6 44 button1 -height 400 -width 10
            mouse-press 6 44 button1 -height 400 -width 10
            mouse-release 6 44 button1 524288 -height 400 -width 10
        }
        with [get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part 
            -className SquareEditPart] {
            mouse-move 6 45 button1 -height 400 -width 10
            mouse-press 6 45 button1 -height 400 -width 10
            mouse-release 6 45 button1 524288 -height 400 -width 10
        }
    }
}

// Check Arrow from Class1 to Class2 
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
    with [get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1"] {
        with [get-target-connection 0] {
            get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
            get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
            get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
            get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
            get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
            get-property "element.ownedStyle.size" | equals 2 | verify-true
            get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
            //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
            //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
            get-property "element.ownedStyle.centered" | equals None | verify-true
            get-property "getFigure().isVisible()" | equals true | verify-true
        }
        get-edit-part -className SquareEditPart | get-property "getFigure().isVisible()" | equals true | verify-true
    }
}
// Check arrow label
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram" 
    | get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1"] {
    get-target-connection 0 | get-edit-part -className "" | get-property "getFigure().getText()" | equals "Operation_1" 
        | verify-true
}

// Check operation execution
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram" 
    | get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1"] {
    get-edit-part -className SquareEditPart | get-property "getFigure().isVisible()" | equals true | verify-true
}
        
// Check Arrow from class2 to Class1
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] { 
    with [get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-target-connection 0] {
        get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
        get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
        get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
        get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
        get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
        get-property "element.ownedStyle.size" | equals 2 | verify-true
        get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
        //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
        //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
        get-property "element.ownedStyle.centered" | equals None | verify-true
        get-property "getFigure().isVisible()" | equals true | verify-true
    }
}
// Check model
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
    get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1" 
        | get-target-connection 0 | get-property "element.target.name" | equals "Operation_1" | verify-true
    get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-target-connection 0 
        | get-property "element.target.name" | equals "Operation_1_reply" | verify-true
    with [get-edit-part -name "Class2 : Class2 [1]" | get-edit-part -name Class2 | get-edit-part -name "Operation_1" 
        | get-target-connection 0] {
        get-property "source.element.target.name" | equals Class1 | verify-true
        get-property "target.element.target.name" | equals "Operation_1" | verify-true
        get-property "element.semanticElements.Message[0].name" | equals "Operation_1" | verify-true
        get-property "element.semanticElements.Message[0].messageSort" | equals synchCall | verify-true
    }
    with [get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-target-connection 0] {
        get-property "source.element.target.name" | equals "Operation_1" | verify-true
        get-property "target.element.target.name" | equals Class1 | verify-true
        get-property "element.semanticElements.Message[0].name" | equals "Operation_1_reply" | verify-true
        get-property "element.semanticElements.Message[0].messageSort" | equals reply | verify-true
    }
}
// Check reply arrow label
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
    get-edit-part -name "Class1 : Class1 [1]" | get-edit-part -name Class1 | get-target-connection 0 | get-edit-part 
        -className "" | get-property "getFigure().getText()" | equals "Operation_1_reply" 
        | verify-true
}


// Create Synchronous message From Actor1 to Actor2
with [get-editor "Test Sequence Diagram"] {
    get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram" | mouse-move 748 156 -height 500 -width 750
    with [get-palette | get-palette-entry "Synchronous Message and Operation Creation"] {
        mouse-move 58 9 button1 -height 37 -width 281
        mouse-press 58 9 button1 -height 37 -width 281
        mouse-release 58 9 button1 524288 -height 37 -width 281
    }
    with [get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
        mouse-move 515 113 -height 500 -width 750
        with [get-edit-part -name "Actor1 : Actor1 [1]" | get-edit-part -name Actor1 | get-edit-part 
            -className SquareEditPart] {
            mouse-move 3 12 button1 -height 400 -width 10
            mouse-press 3 12 button1 -height 400 -width 10
            mouse-release 3 12 button1 524288 -height 400 -width 10
        }
        mouse-move 694 108 -height 500 -width 750
        with [get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part 
            -className SquareEditPart] {
            mouse-move 5 10 button1 -height 400 -width 10
            mouse-press 5 10 button1 -height 400 -width 10
        }
    }
    with [get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
        get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part 
            -className SquareEditPart | mouse-release 5 10 button1 524288 -height 400 -width 10
        mouse-move 70 219 -height 500 -width 767
    }
}

// Check diagram
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
    get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -name "Message_2" 
        | get-target-connection 0 | get-edit-part -className "" 
        | get-property "getFigure().getText()" | equals "Message_2" | verify-true
}
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
    get-edit-part -name "Actor1 : Actor1 [1]" | get-edit-part -name Actor1 | get-target-connection 0 | get-edit-part 
        -className "" | get-property "getFigure().getText()" | equals "Message_2_reply" 
        | verify-true
}
with [get-editor "Test Sequence Diagram" | get-diagram -index 1 | get-edit-part -name "Test Sequence Diagram"] {
    // Arrow from Actor1 to Actor2
    with [get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -name "Message_2" 
        | get-target-connection 0] {
        get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
        get-property "element.ownedStyle.lineStyle" | equals solid | verify-true
        get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
        get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
        get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
        get-property "element.ownedStyle.size" | equals 2 | verify-true
        get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
        //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
        //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
        get-property "element.ownedStyle.centered" | equals None | verify-true
    }
    
    // Message execution
    get-property "getFigure().isVisible()" | equals true | verify-true
    get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -name "Message_2" 
        | get-edit-part -name "Message_2" | get-property "getFigure().getText()" | equals "Message_2" | verify-true
    
    // Arrow from Actor2 to Actor1
    with [get-edit-part -name "Actor1 : Actor1 [1]" | get-edit-part -name Actor1 | get-target-connection 0] {
        //get-edit-part -className "" | get-property "getFigure().getText()" | equals "Message_2_reply" | verify-true
        get-property "element.ownedStyle.customFeatures" | equals "[]" | verify-true
        get-property "element.ownedStyle.lineStyle" | equals dash | verify-true
        get-property "element.ownedStyle.sourceArrow" | equals NoDecoration | verify-true
        get-property "element.ownedStyle.targetArrow" | equals InputArrow | verify-true
        get-property "element.ownedStyle.foldingStyle" | equals NONE | verify-true
        get-property "element.ownedStyle.size" | equals 2 | verify-true
        get-property "element.ownedStyle.routingStyle" | equals straight | verify-true
        //get-property "element.ownedStyle.beginLabelStyle" | equals null | verify-true
        //get-property "element.ownedStyle.endLabelStyle" | equals null | verify-true
        get-property "element.ownedStyle.centered" | equals None | verify-true
    }
    
    // Check Model
    // Arrow from Actor1 to Actor2
    with [get-edit-part -name "Actor2 : Actor2 [1]" | get-edit-part -name Actor2 | get-edit-part -name "Message_2" 
        | get-target-connection 0] {
        get-property "element.semanticElements.Message[0].name" | equals "Message_2" | verify-true
        get-property "element.semanticElements.Message[0].messageSort" | equals synchCall | verify-true
        get-property "element.sourceNode.name" | equals Actor1 | verify-true
        get-property "element.targetNode.name" | equals "Message_2" | verify-true
    }
    // Arrow from Actor2 to Actor1
    with [get-edit-part -name "Actor1 : Actor1 [1]" | get-edit-part -name Actor1 | get-target-connection 0] {
        get-property "element.semanticElements.Message[0].name" | equals "Message_2_reply" | verify-true
        get-property "element.semanticElements.Message[0].messageSort" | equals reply | verify-true
        get-property "element.sourceNode.name" | equals "Message_2" | verify-true
        get-property "element.targetNode.name" | equals Actor1 | verify-true
    }
}

------=_.content-0a7243a0-75d3-3d5f-9791-539de0e5b7ac--
